select(date,isin,"0",pos_event,neg_event) %>%
select(-c(contains("pos_event_"),contains("neg_event_"))) %>%
filter(pos_event == 1 | neg_event == 1) %>% group_by(date) %>%
summarise_by_time(
.date_var = date,
.by       = "month", # Setup for monthly aggregation
# Summarization
Positive  = sum(pos_event),
Negative  = sum(neg_event)
) %>% pivot_longer(!date, names_to = "Type", values_to = "value")
>%
data %>%
ggplot(aes(x = date, y = value, colour = Type, fill = Type)) + geom_bar(stat = "identity", alpha = 0.7)
data %>%
ggplot(aes(x = date, y = value, colour = Type, fill = Type)) + geom_bar(stat = "identity", alpha = 0.7) +
theme_bw() +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal")
?labs
data %>%
ggplot(aes(x = date, y = value, colour = Type, fill = Type)) + geom_bar(stat = "identity", alpha = 0.7) +
theme_bw() +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal") +
labs(x = "Date", y = "News articles")
data %>%
ggplot(aes(x = date, y = value, colour = Type, fill = Type)) + geom_bar(stat = "identity", alpha = 0.7) +
theme_bw() +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal") +
labs(x = "Date", y = "News articles") +
scale_x_discrete(breaks = pretty_dates())
data %>%
ggplot(aes(x = date, y = value, colour = Type, fill = Type)) + geom_bar(stat = "identity", alpha = 0.7) +
theme_bw() +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal") +
labs(x = "Date", y = "News articles") +
scale_x_discrete(breaks = pretty_breaks())
data %>%
ggplot(aes(x = date, y = value, colour = Type, fill = Type)) + geom_bar(stat = "identity", alpha = 0.7) +
theme_bw() +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal") +
#labs(x = "Date", y = "News articles") +
scale_x_discrete(breaks = pretty_dates(date))
data %>%
ggplot(aes(x = date, y = value, colour = Type, fill = Type)) + geom_bar(stat = "identity", alpha = 0.7) +
theme_bw() +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal") +
labs(x = "Date", y = "News articles") +
scale_x_date(date_breaks = "1 year",
date_labels = "%Y")
ggsave("event_distribution.png")
short_term_data_sdg <- betas %>%
left_join(short_term_data_daily, by = c("date","isin")) %>%
group_by(isin) %>%
mutate(
pred_ret = alpha + beta*mkt_excess,
abnormal_ret = W_RETURN - pred_ret
) %>%
select(-c(beta,alpha,pred_ret,sdg_not_relevant_positive_count,sdg_not_relevant_negative_count))
short_term_data_event_sdg = short_term_data_sdg %>%
select(isin,date,abnormal_ret,MKT_CAP, contains("sdg")) %>%
select(isin,date,abnormal_ret, MKT_CAP,contains("tive"),-c(sdg_broad_negative_count,sdg_broad_neutral_count,sdg_broad_positive_count))
for (i in 1:10) {
short_term_data_event_sdg[paste0("-",i)] <- short_term_data_event_sdg %>% group_by(isin) %>% transmute(t = lag(abnormal_ret,i)) %>% ungroup() %>% select(-isin)
short_term_data_event_sdg[paste0("",i)] <- short_term_data_event_sdg %>% group_by(isin) %>% transmute(t = lead(abnormal_ret,i)) %>% ungroup() %>% select(-isin)
}
short_term_return_sdg = short_term_data_event_sdg %>%
pivot_longer(!c(date,isin,abnormal_ret,'-1':'10',MKT_CAP), names_to = "sdg", values_to = "value") %>%
group_by(isin,sdg) %>%
mutate(
value = na_if(value, 0),
sd = sd(value,na.rm = TRUE),
mean = mean(value, na.rm = TRUE),
threshold = mean + 1*sd
) %>%
mutate(event =
case_when(value > threshold & value > 3 ~ 1,
TRUE
~ 0)
) %>%
rename('0' = abnormal_ret) %>%
select(-c(value,sd,mean,threshold)) %>%
filter(event == 1) %>%
mutate(group = case_when(grepl("pos", sdg) ~ "positive",
grepl("nega", sdg) ~"negative"),
)
short_term_return_sdg
colnames(short_term_return_sdg)
short_term_return_sdg %>% select(isin, date, sdg,group)
short_term_return_sdg
short_term_data_sdg
short_term_return_sdg
short_term_return_sdg %>% select(isin, date, sdg,group) %>% filter(group == 'negative)
short_term_return_sdg %>% select(isin, date, sdg,group) %>% filter(group == 'negative')
grepl("sdg_3", sdg) ~ "SDG 3"
short_term_return_sdg %>% select(isin, date, sdg,group) %>%
mutate(group = case_when(grepl("sdg_1", sdg) ~ "SDG 1",
grepl("sdg_2", sdg) ~ "SDG 2",
grepl("sdg_3", sdg) ~ "SDG 3"))
short_term_return_sdg %>% select(isin, date, sdg,group) %>%
mutate(group = case_when(grepl("sdg_1_", sdg) ~ "SDG 1",
grepl("sdg_2_", sdg) ~ "SDG 2",
grepl("sdg_3_", sdg) ~ "SDG 3"),
grepl("sdg_4_", sdg) ~ "SDG 4"),
short_term_return_sdg %>% select(isin, date, sdg,group) %>%
mutate(group = case_when(grepl("sdg_1_", sdg) ~ "SDG 1",
grepl("sdg_2_", sdg) ~ "SDG 2",
grepl("sdg_3_", sdg) ~ "SDG 3",
grepl("sdg_4_", sdg) ~ "SDG 4",
grepl("sdg_5_", sdg) ~ "SDG 5",
grepl("sdg_6_", sdg) ~ "SDG 6",
grepl("sdg_7_", sdg) ~ "SDG 7"))
short_term_return_sdg %>% select(isin, date, sdg,group) %>%
mutate(group = case_when(grepl("sdg_1_", sdg) ~ "SDG 1",
grepl("sdg_2_", sdg) ~ "SDG 2",
grepl("sdg_3_", sdg) ~ "SDG 3",
grepl("sdg_4_", sdg) ~ "SDG 4",
grepl("sdg_5_", sdg) ~ "SDG 5",
grepl("sdg_6_", sdg) ~ "SDG 6",
grepl("sdg_7_", sdg) ~ "SDG 7"
grepl("sdg_6_", sdg) ~ "SDG 6",
short_term_return_sdg %>% select(isin, date, sdg,group) %>%
mutate(group = case_when(grepl("sdg_1_", sdg) ~ "SDG 1",
grepl("sdg_2_", sdg) ~ "SDG 2",
grepl("sdg_3_", sdg) ~ "SDG 3",
grepl("sdg_4_", sdg) ~ "SDG 4",
grepl("sdg_5_", sdg) ~ "SDG 5",
grepl("sdg_6_", sdg) ~ "SDG 6",
grepl("sdg_7_", sdg) ~ "SDG 7"
grepl("sdg_8_", sdg) ~ "SDG 8",
short_term_return_sdg %>% select(isin, date, sdg,group) %>%
mutate(group = case_when(grepl("sdg_1_", sdg) ~ "SDG 1",
grepl("sdg_2_", sdg) ~ "SDG 2",
grepl("sdg_3_", sdg) ~ "SDG 3",
grepl("sdg_4_", sdg) ~ "SDG 4",
grepl("sdg_5_", sdg) ~ "SDG 5",
grepl("sdg_6_", sdg) ~ "SDG 6",
grepl("sdg_7_", sdg) ~ "SDG 7",
grepl("sdg_8_", sdg) ~ "SDG 8",
grepl("sdg_9_", sdg) ~ "SDG 9",
grepl("sdg_10_", sdg) ~ "SDG 10",
grepl("sdg_11_", sdg) ~ "SDG 11",
grepl("sdg_12_", sdg) ~ "SDG 12",
grepl("sdg_13_", sdg) ~ "SDG 13",
grepl("sdg_14_", sdg) ~ "SDG 14",
grepl("sdg_15_", sdg) ~ "SDG 15",
grepl("sdg_16_", sdg) ~ "SDG 16",
grepl("sdg_17_", sdg) ~ "SDG 17",
)
short_term_return_sdg %>% select(isin, date, sdg,group) %>%
mutate(sdg = case_when(grepl("sdg_1_", sdg) ~ "SDG 1",
grepl("sdg_2_", sdg) ~ "SDG 2",
grepl("sdg_3_", sdg) ~ "SDG 3",
grepl("sdg_4_", sdg) ~ "SDG 4",
grepl("sdg_5_", sdg) ~ "SDG 5",
grepl("sdg_6_", sdg) ~ "SDG 6",
grepl("sdg_7_", sdg) ~ "SDG 7",
grepl("sdg_8_", sdg) ~ "SDG 8",
grepl("sdg_9_", sdg) ~ "SDG 9",
grepl("sdg_10_", sdg) ~ "SDG 10",
grepl("sdg_11_", sdg) ~ "SDG 11",
grepl("sdg_12_", sdg) ~ "SDG 12",
grepl("sdg_13_", sdg) ~ "SDG 13",
grepl("sdg_14_", sdg) ~ "SDG 14",
grepl("sdg_15_", sdg) ~ "SDG 15",
grepl("sdg_16_", sdg) ~ "SDG 16",
grepl("sdg_17_", sdg) ~ "SDG 17",
)
data = short_term_return_sdg %>% select(isin, date, sdg,group) %>%
mutate(sdg = case_when(grepl("sdg_1_", sdg) ~ "SDG 1",
grepl("sdg_2_", sdg) ~ "SDG 2",
grepl("sdg_3_", sdg) ~ "SDG 3",
grepl("sdg_4_", sdg) ~ "SDG 4",
grepl("sdg_5_", sdg) ~ "SDG 5",
grepl("sdg_6_", sdg) ~ "SDG 6",
grepl("sdg_7_", sdg) ~ "SDG 7",
grepl("sdg_8_", sdg) ~ "SDG 8",
grepl("sdg_9_", sdg) ~ "SDG 9",
grepl("sdg_10_", sdg) ~ "SDG 10",
grepl("sdg_11_", sdg) ~ "SDG 11",
grepl("sdg_12_", sdg) ~ "SDG 12",
grepl("sdg_13_", sdg) ~ "SDG 13",
grepl("sdg_14_", sdg) ~ "SDG 14",
grepl("sdg_15_", sdg) ~ "SDG 15",
grepl("sdg_16_", sdg) ~ "SDG 16",
grepl("sdg_17_", sdg) ~ "SDG 17",
)
data
data %>% group_by(sdg, group) %>% summarise(s = n())
data %>% group_by(sdg, group) %>% summarise(s = n()) %>% ggplot(aes(x = sdg, y = s )) + geom_bar(stat = "identity")
data %>% group_by(sdg, group) %>% summarise(s = n()) %>%
ggplot(aes(x = sdg, y = s, colour = group )) +
geom_bar(stat = "identity") +
theme_bw()+
theme(legend.title = element_blank(),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle=45)) +
theme(legend.position = "none")
data %>% group_by(sdg, group) %>% summarise(s = n()) %>%
ggplot(aes(x = sdg, y = s, colour = group, fill = group )) +
geom_bar(stat = "identity") +
theme_bw()+
theme(legend.title = element_blank(),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle=45)) +
theme(legend.position = "none")
positive_index_sdg = short_term_return_sdg %>%
filter(group == 'positive') %>%
mutate_at("sdg", str_replace, "_positive_count", "") %>%
mutate_at("sdg", str_replace, "_", " ") %>%
mutate(sdg = factor(sdg, levels = c("sdg 1", "sdg 2","sdg 3","sdg 4","sdg 5","sdg 6","sdg 7","sdg 8","sdg 9","sdg 10","sdg 11",
"sdg 12", "sdg 13","sdg 14","sdg 15","sdg 16","sdg 17"))) %>%
select(-c(event,group)) %>%
pivot_longer(!c(date,isin,sdg), names_to = "period", values_to = "abnormal_ret") %>% na.omit(abnormal_ret) %>%
group_by(sdg,period) %>%
mutate(period = as.factor(period)) %>%
summarise(AAR = mean(abnormal_ret)) %>%
mutate( event = "positive",
period = factor(period, levels = c("-10", "-9","-8","-7","-6","-5","-4","-3","-2","-1","0", "1", "2","3","4","5","6","7","8","9","10"))) %>%
arrange(sdg,period) %>%
mutate(CAAR = cumsum(AAR))
n_positive = short_term_return_sdg %>%
filter(group == 'positive') %>%
mutate_at("sdg", str_replace, "_positive_count", "") %>%
mutate_at("sdg", str_replace, "_", " ") %>%
mutate(sdg = factor(sdg, levels = c("sdg 1", "sdg 2","sdg 3","sdg 4","sdg 5","sdg 6","sdg 7","sdg 8","sdg 9","sdg 10","sdg 11",
"sdg 12", "sdg 13","sdg 14","sdg 15","sdg 16","sdg 17"))) %>%
select(-c(event,group)) %>%
pivot_longer(!c(date,isin,sdg), names_to = "period", values_to = "abnormal_ret") %>% na.omit(abnormal_ret) %>%
mutate(period = factor(period, levels = c("-10", "-9","-8","-7","-6","-5","-4","-3","-2","-1","0", "1", "2","3","4","5","6","7","8","9","10"))) %>%
arrange(isin,sdg,date,period) %>%
group_by(isin,sdg,date) %>%
mutate(CAAR = cumsum(abnormal_ret)) %>%
group_by(sdg) %>% filter(period == '0') %>%
summarise(n = n(),
sd = sd(abnormal_ret),
se = sd/sqrt(n),
t = 1.96,
CI=t*se
)
n_positive
data
data %>% group_by(sdg, group) %>%
mutate(sdg = factor(sdg, levels = c("SDG 1", "SDG 2","SDG 3","SDG 4","SDG 5","SDG 6","SDG 7","SDG 8","SDG 9","SDG 10","SDG 11",
"SDG 12", "SDG 13","SDG 14","SDG 15","SDG 16","SDG 17")))
data %>% group_by(sdg, group) %>%
mutate(sdg = factor(sdg, levels = c("SDG 1", "SDG 2","SDG 3","SDG 4","SDG 5","SDG 6","SDG 7","SDG 8","SDG 9","SDG 10","SDG 11",
"SDG 12", "SDG 13","SDG 14","SDG 15","SDG 16","SDG 17"))) %>%
summarise(s = n()) %>%
ggplot(aes(x = sdg, y = s, colour = group, fill = group )) +
geom_bar(stat = "identity") +
theme_bw()+
theme(legend.title = element_blank(),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle=45)) +
theme(legend.position = "none")
data %>% group_by(sdg, group) %>%
mutate(sdg = factor(sdg, levels = c("SDG 1", "SDG 2","SDG 3","SDG 4","SDG 5","SDG 6","SDG 7","SDG 8","SDG 9","SDG 10","SDG 11",
"SDG 12", "SDG 13","SDG 14","SDG 15","SDG 16","SDG 17"))) %>%
summarise(s = n()) %>%
ggplot(aes(x = sdg, y = s, colour = group, fill = group )) +
geom_bar(stat = "identity") +
theme_bw()+
theme(legend.title = element_blank(),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle=45)) +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal")
data = short_term_data_event %>%
select(date,isin,"0",pos_event,neg_event) %>%
select(-c(contains("pos_event_"),contains("neg_event_"))) %>%
filter(pos_event == 1 | neg_event == 1) %>% group_by(date) %>%
summarise_by_time(
.date_var = date,
.by       = "month", # Setup for monthly aggregation
# Summarization
Positive  = sum(pos_event),
Negative  = sum(neg_event)) %>% pivot_longer(!date, names_to = "Type", values_to = "value")
data = short_term_data_event %>%
select(date,isin,"0",pos_event,neg_event) %>%
select(-c(contains("pos_event_"),contains("neg_event_"))) %>%
filter(pos_event == 1 | neg_event == 1) %>% group_by(date) %>%
summarise_by_time(
.date_var = date,
.by       = "month", # Setup for monthly aggregation
# Summarization
Positive  = sum(pos_event),
Negative  = sum(neg_event)) %>% pivot_longer(!date, names_to = "Type", values_to = "value")
data %>%
ggplot(aes(x = date, y = value, colour = Type, fill = Type)) + geom_bar(stat = "identity", alpha = 0.7) +
theme_bw() +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal") +
labs(x = "Date", y = "News articles") +
scale_x_date(date_breaks = "1 year",
date_labels
data %>%
ggplot(aes(x = date, y = value, colour = Type, fill = Type)) + geom_bar(stat = "identity", alpha = 0.7) +
theme_bw() +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal") +
labs(x = "Date", y = "Events") +
scale_x_date(date_breaks = "1 year",
date_labels = "%Y")
ggsave("event_distribution.png")
data = short_term_return_sdg %>% select(isin, date, sdg,group) %>%
mutate(sdg = case_when(grepl("sdg_1_", sdg) ~ "SDG 1",
grepl("sdg_2_", sdg) ~ "SDG 2",
grepl("sdg_3_", sdg) ~ "SDG 3",
grepl("sdg_4_", sdg) ~ "SDG 4",
grepl("sdg_5_", sdg) ~ "SDG 5",
grepl("sdg_6_", sdg) ~ "SDG 6",
grepl("sdg_7_", sdg) ~ "SDG 7",
grepl("sdg_8_", sdg) ~ "SDG 8",
grepl("sdg_9_", sdg) ~ "SDG 9",
grepl("sdg_10_", sdg) ~ "SDG 10",
grepl("sdg_11_", sdg) ~ "SDG 11",
grepl("sdg_12_", sdg) ~ "SDG 12",
grepl("sdg_13_", sdg) ~ "SDG 13",
grepl("sdg_14_", sdg) ~ "SDG 14",
grepl("sdg_15_", sdg) ~ "SDG 15",
grepl("sdg_16_", sdg) ~ "SDG 16",
grepl("sdg_17_", sdg) ~ "SDG 17",
)
data %>% group_by(sdg, group) %>%
mutate(sdg = factor(sdg, levels = c("SDG 1", "SDG 2","SDG 3","SDG 4","SDG 5","SDG 6","SDG 7","SDG 8","SDG 9","SDG 10","SDG 11",
"SDG 12", "SDG 13","SDG 14","SDG 15","SDG 16","SDG 17"))) %>%
summarise(Events = n()) %>%
ggplot(aes(x = sdg, y = s, colour = group, fill = group )) +
geom_bar(stat = "identity") +
theme_bw()+
theme(legend.title = element_blank(),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle=45)) +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal")
data %>% group_by(sdg, group) %>%
mutate(sdg = factor(sdg, levels = c("SDG 1", "SDG 2","SDG 3","SDG 4","SDG 5","SDG 6","SDG 7","SDG 8","SDG 9","SDG 10","SDG 11",
"SDG 12", "SDG 13","SDG 14","SDG 15","SDG 16","SDG 17"))) %>%
summarise(Events = n()) %>%
ggplot(aes(x = sdg, y = Events, colour = group, fill = group )) +
geom_bar(stat = "identity") +
theme_bw()+
theme(legend.title = element_blank(),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle=45)) +
theme(legend.title = element_blank(),
legend.position="top",
legend.direction = "horizontal")
ggsave("event_distribution_SDG.png")
short_term_return_sdg
short_term_return_sdg %>% ungroup() %>% filter(group == 'positive') %>% summarise(n_distinct(isin))
short_term_data_event_sdg %>%
pivot_longer(!c(date,isin,abnormal_ret,'-1':'10',MKT_CAP), names_to = "sdg", values_to = "value") %>%
group_by(isin,sdg)
negative_index
negative_index %>% filter(type == '0')
negative_index %>% filter(type == '0') %>% ungroup() %>% summarise(n_distinct(isin))
negative_index %>% filter(type == '0') %>% ungroup() %>% unique(isin)
negative_index %>% filter(type == '0') %>% ungroup() %>% distinct(isin)
negative_index %>% filter(type == '0') %>% ungroup() %>% distinct(isin) %>% rbind(negative_index %>% filter(type == '0') %>% ungroup() %>% distinct(isin))
positive_index %>% filter(type == '0') %>% ungroup() %>% distinct(isin)
negative_index %>% filter(type == '0') %>% ungroup() %>% distinct(isin) %>% rbind(positive_index %>% filter(type == '0') %>% ungroup() %>% distinct(isin))
negative_index %>% filter(type == '0') %>% ungroup() %>% distinct(isin) %>% rbind(positive_index %>% filter(type == '0') %>% ungroup() %>% distinct(isin)) %>% distinct(isin)
long_term_data_monthly <- data_monthly %>%
#left_join(ESG_RR, by ="isin") %>% filter(ESG_risk_category == 'High') %>%
transmute(date,isin,MKT_CAP, free_float_mkt_cap,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>%
group_by(isin) %>%
transmute(date,isin,ret,MKT_CAP,free_float_mkt_cap,
norm_positive_sum = replace_na(norm_positive_sum,0),
norm_negative_sum = replace_na(norm_negative_sum,0),
roll_mean = across(!c(date,ret,MKT_CAP,free_float_mkt_cap),
~ rollmean(.x, k = y, fill = NA, align = "right"))) %>%
unnest(roll_mean,names_sep = "_") %>% arrange(isin) %>%
group_by(isin) %>%
mutate(
roll_mean_positive = na_if(roll_mean_norm_positive_sum, 0),
roll_mean_negative = na_if(roll_mean_norm_negative_sum, 0),
positive_threshold = mean(roll_mean_positive,na.rm = TRUE) + 2*sd(roll_mean_positive,na.rm = TRUE),
negative_threshold = mean(roll_mean_negative,na.rm = TRUE) + z*sd(roll_mean_negative,na.rm = TRUE)
) %>%
group_by(date,isin) %>%
# Make sure that we only calculate the cutoff value of periods with actual observations.
mutate(
neg_event =
case_when(roll_mean_negative > negative_threshold & roll_mean_negative > 5 #& roll_mean_negative > 0.5*roll_mean_norm_positive_sum
~ 1,
TRUE ~ 0)
)
# Add lagged values of the events to sort whether an event has happened in the last X months.
for (i in 1:12) {
long_term_data_monthly[paste0("-",i)] <- long_term_data_monthly %>% group_by(isin) %>% transmute(t = lag(neg_event,i)) %>% ungroup() %>% select(-isin)
}
long_term_data_negative = long_term_data_monthly %>% select(date,isin,ret,MKT_CAP,free_float_mkt_cap,contains("-")) %>%
pivot_longer(!c(date,isin,ret,MKT_CAP,free_float_mkt_cap), names_to = "period", values_to = "event") %>%
mutate(period = as.numeric(period)) %>%
filter(event == '1') %>%
# Remove duplicate rows of the returns in case one ISIN pops up on several dates.
group_by(date,isin) %>% distinct(ret, .keep_all = TRUE)
long_term_data_negative
long_term_data_negative %>% filter(period == '-1')
long_term_data_negative %>% filter(period == '-1') %>% summarise(n_distinct(isin))
long_term_data_negative %>% filter(period == '-1') %>% ungroup() %>% summarise(n_distinct(isin))
long_term_data_negative %>% filter(period == '-1') %>% group_by(isin) %>% summarise(n())
long_term_data_negative %>% filter(period == '-1') %>% group_by(isin) %>% summarise(n()) %>% arrange(n())
long_term_data_negative %>% filter(period == '-1') %>% group_by(isin) %>% summarise(n = n()) %>% arrange(n)
long_term_data_negative %>% filter(period == '-1') %>% group_by(isin) %>% summarise(n = n()) %>% arrange(desc(n))
long_term_data_monthly <- data_monthly %>%
#left_join(ESG_RR, by ="isin") %>% filter(ESG_risk_category == 'High') %>%
transmute(date,isin,MKT_CAP, free_float_mkt_cap,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>%
group_by(isin) %>%
transmute(date,isin,ret,MKT_CAP,free_float_mkt_cap,
norm_positive_sum = replace_na(norm_positive_sum,0),
norm_negative_sum = replace_na(norm_negative_sum,0),
roll_mean = across(!c(date,ret,MKT_CAP,free_float_mkt_cap),
~ rollmean(.x, k = y, fill = NA, align = "right"))) %>%
unnest(roll_mean,names_sep = "_") %>% arrange(isin) %>%
group_by(isin) %>%
mutate(
roll_mean_positive = na_if(roll_mean_norm_positive_sum, 0),
roll_mean_negative = na_if(roll_mean_norm_negative_sum, 0),
positive_threshold = mean(roll_mean_positive,na.rm = TRUE) + z*sd(roll_mean_positive,na.rm = TRUE),
negative_threshold = mean(roll_mean_negative,na.rm = TRUE) + 2*sd(roll_mean_negative,na.rm = TRUE)
) %>%
group_by(date,isin) %>%
# Make sure that we only calculate the cutoff value of periods with actual observations.
mutate(
neg_event =
case_when(roll_mean_positive > positive_threshold & roll_mean_positive > 10 & roll_mean_positive > 2*roll_mean_norm_negative_sum
~ 1,
TRUE ~ 0)
)
# Add lagged values of the events to sort whether an event has happened in the last X months.
for (i in 1:12) {
long_term_data_monthly[paste0("-",i)] <- long_term_data_monthly %>% group_by(isin) %>% transmute(t = lag(neg_event,i)) %>% ungroup() %>% select(-isin)
}
# Add lagged values of the events to sort whether an event has happened in the last X months.
for (i in 1:12) {
long_term_data_monthly[paste0("-",i)] <- long_term_data_monthly %>% group_by(isin) %>% transmute(t = lag(neg_event,i)) %>% ungroup() %>% select(-isin)
}
long_term_data_positive = long_term_data_monthly %>% select(date,isin,ret,MKT_CAP,free_float_mkt_cap,contains("-")) %>%
pivot_longer(!c(date,isin,ret,MKT_CAP,free_float_mkt_cap), names_to = "period", values_to = "event") %>%
mutate(period = as.numeric(period)) %>%
filter(event == '1') %>%
# Remove duplicate rows of the returns in case one ISIN pops up on several dates.
group_by(date,isin) %>% distinct(ret, .keep_all = TRUE)
i=1
long_term_data_M_positive = long_term_data_positive %>%
# Only include the last 1 months:
filter(period >= -i) %>%
group_by(date) %>%
summarise(
ret = weighted.mean(ret,free_float_mkt_cap),
#ret = mean(ret),
n = n_distinct(isin)) %>%
left_join(eu_5factors_monthly, by = "date")
long_term_data_positive %>% filter(period == '-1') %>% group_by(isin) %>% summarise(n = n()) %>% arrange(desc(n))
long_term_data_positive %>% filter(period == '-1') %>% ungroup() %>% summarise(n = n())
long_term_data_positive %>% filter(period == '-1') %>% ungroup() %>% summarise(n = n_distinct())
long_term_data_positive %>% filter(period == '-1') %>% ungroup() %>% summarise(n = n_distinct(isin))
long_term_data_positive %>% filter(period == '-1') %>% ungroup() %>% n_distinct(isin)
long_term_data_positive %>% filter(period == '-1') %>% ungroup() %>% distinct(isin)
long_term_data_negative %>% filter(period == '-1') %>% ungroup() %>% distinct(isin)
long_term_data_positive %>% filter(period == '-1') %>% ungroup() %>% distinct(isin) %>% rbind(
long_term_data_negative %>% filter(period == '-1') %>% ungroup() %>% distinct(isin))
long_term_data_positive %>% filter(period == '-1') %>% ungroup() %>% distinct(isin) %>% rbind(
long_term_data_negative %>% filter(period == '-1') %>% ungroup() %>% distinct(isin)) %>% distinct(isin)
short_term_data_event = short_term_data %>%
group_by(isin) %>%
mutate(
norm_positive_sum = na_if(norm_positive_sum, 0),
norm_negative_sum = na_if(norm_negative_sum, 0),
positive_threshold = mean(norm_positive_sum,na.rm = TRUE) + 1*sd(norm_positive_sum,na.rm = TRUE),
negative_threshold = mean(norm_negative_sum,na.rm = TRUE) + 1*sd(norm_negative_sum,na.rm = TRUE)
) %>%
rename("0" = abnormal_ret) %>%
select(-c("W_RETURN","mkt_excess",
#"positive_threshold","negative_threshold","norm_positive_sum","norm_negative_sum",
"sentiment_negative_count","sentiment_positive_count",
#"roll_mean_norm_negative_sum","roll_mean_norm_positive_sum", "roll_sum_norm_negative_sum","roll_sum_norm_positive_sum"
)) %>%
group_by(date,isin) %>%
# Make sure that we only calculate the cutoff value of periods with actual observations.
mutate(pos_event =
case_when(norm_positive_sum > positive_threshold & norm_positive_sum > 10 & norm_positive_sum > 2*norm_negative_sum ~ 1,
TRUE ~ 0),
neg_event =
case_when(norm_negative_sum > negative_threshold & norm_negative_sum > 10 & norm_negative_sum > 1*norm_positive_sum ~ 1,
TRUE ~ 0)
)
