"Market beta" = coefficients(lm(portfolio_return ~ mkt_excess))[2]
)) |>
mutate(model = str_remove(model, "return_")) |>
pivot_longer(-model, names_to = "measure") |>
pivot_wider(names_from = model, values_from = value)
if (full_evaluation) {
weight_evaluation <- weights_crsp |>
select(month, contains("weight")) |>
pivot_longer(-month, values_to = "weight", names_to = "model") |>
group_by(model, month) |>
transmute(tibble(
"Absolute weight" = abs(weight),
"Max. weight" = max(weight),
"Min. weight" = min(weight),
"Avg. sum of negative weights" = -sum(weight[weight < 0]),
"Avg. fraction of negative weights" = sum(weight < 0) / n()
)) |>
group_by(model) |>
summarize(across(-month, ~ 100 * mean(.))) |>
mutate(model = str_remove(model, "weight_")) |>
pivot_longer(-model, names_to = "measure") |>
pivot_wider(names_from = model, values_from = value)
evaluation <- bind_rows(evaluation, weight_evaluation)
}
return(evaluation)
}
compute_objective_function <- function(theta,
data,
objective_measure = "Expected utility",
value_weighting = TRUE,
allow_short_selling = TRUE) {
processed_data <- compute_portfolio_weights(
theta,
data,
value_weighting,
allow_short_selling
)
objective_function <- evaluate_portfolio(processed_data,
full_evaluation = FALSE
) |>
filter(measure == objective_measure) |>
pull(tilt)
return(-objective_function)
}
compute_portfolio_weights <- function(theta,
data,
value_weighting = TRUE,
allow_short_selling = TRUE) {
data |>
group_by(month) |>
bind_cols(
characteristic_tilt = data |>
transmute(momentum_lag  = momentum_lag  / n,
size_lag = size_lag / n) %>%
#event = event / n) |>
as.matrix() %*% theta |> as.numeric()
) |>
mutate(
# Definition of benchmark weight
weight_benchmark = case_when(
value_weighting == TRUE ~ relative_mktcap,
value_weighting == FALSE ~ 1 / n
),
# Parametric portfolio weights
weight_tilt = weight_benchmark + characteristic_tilt,
# Short-sell constraint
weight_tilt = case_when(
allow_short_selling == TRUE ~ weight_tilt,
allow_short_selling == FALSE ~ pmax(0, weight_tilt)
),
# Weights sum up to 1
weight_tilt = weight_tilt / sum(weight_tilt)
) |>
ungroup()
}
source("functions.R")
pp_data = long_term_data_weekly %>% select(date, isin, ret, MKT_CAP, pos_event,neg_event) %>%
group_by(isin) %>%
mutate(
month = date,
ret_excess = ret,
permno = isin,
MKT_CAP = MKT_CAP/1000000000,
mktcap_lag = lag(MKT_CAP)) %>%
na.omit()
pp_monthly_lags = pp_data %>%
group_by(isin) %>%
transmute(isin,
date_5 = lead(date,5),
MKT_CAP)
pp_data = pp_data %>%
inner_join(pp_monthly_lags,
by = c("isin","date" = "date_5"),
suffix = c("", "_5"))
data_portfol = pp_data %>%
mutate(
momentum_lag = mktcap_lag / MKT_CAP_5,
size_lag = log(mktcap_lag)
) %>%
drop_na(contains("lag"))
data_portfol = data_portfol %>%
group_by(date) %>%
mutate(
n = n(),
relative_mktcap = mktcap_lag / sum(mktcap_lag),
across(contains("lag"), ~ (. - mean(.)) / sd(.)),
) %>%
ungroup() %>%
select(-mktcap_lag)
pp_data = long_term_data_weekly %>% select(date, isin, ret, MKT_CAP, pos_event,neg_event) %>%
group_by(isin) %>%
mutate(
month = date,
ret_excess = ret,
permno = isin,
MKT_CAP = MKT_CAP/1000000000,
mktcap_lag = lag(MKT_CAP)) %>%
na.omit()
pp_monthly_lags = pp_data %>%
group_by(isin) %>%
transmute(isin,
date_5 = lead(date,5),
MKT_CAP)
pp_data = pp_data %>%
inner_join(pp_monthly_lags,
by = c("isin","date" = "date_5"),
suffix = c("", "_5"))
data_portfolios = pp_data %>%
mutate(
momentum_lag = mktcap_lag / MKT_CAP_5,
size_lag = log(mktcap_lag)
) %>%
drop_na(contains("lag"))
data_portfolios = data_portfol %>%
group_by(date) %>%
mutate(
n = n(),
relative_mktcap = mktcap_lag / sum(mktcap_lag),
across(contains("lag"), ~ (. - mean(.)) / sd(.)),
) %>%
ungroup() %>%
select(-mktcap_lag)
data_portfolios = data_portfolios %>%
group_by(date) %>%
mutate(
n = n(),
relative_mktcap = mktcap_lag / sum(mktcap_lag),
across(contains("lag"), ~ (. - mean(.)) / sd(.)),
) %>%
ungroup() %>%
select(-mktcap_lag)
n_parameters <- sum(str_detect(
colnames(data_portfolios), "lag"
))
theta <- rep(1.5, n_parameters)
names(theta) <- colnames(data_portfolios)[str_detect(
colnames(data_portfolios), "lag"
)]
optimal_theta <- optim(
par = theta,
compute_objective_function,
objective_measure = "Expected utility",
data = data_portfolios,
value_weighting = TRUE,
allow_short_selling = FALSE
)
optimal_theta
compute_portfolio_weights <- function(theta,
data,
value_weighting = TRUE,
allow_short_selling = TRUE) {
data |>
group_by(month) |>
bind_cols(
characteristic_tilt = data |>
transmute(momentum_lag  = momentum_lag  / n,
size_lag = size_lag / n,
event = event / n) |>
as.matrix() %*% theta |> as.numeric()
) |>
mutate(
# Definition of benchmark weight
weight_benchmark = case_when(
value_weighting == TRUE ~ relative_mktcap,
value_weighting == FALSE ~ 1 / n
),
# Parametric portfolio weights
weight_tilt = weight_benchmark + characteristic_tilt,
# Short-sell constraint
weight_tilt = case_when(
allow_short_selling == TRUE ~ weight_tilt,
allow_short_selling == FALSE ~ pmax(0, weight_tilt)
),
# Weights sum up to 1
weight_tilt = weight_tilt / sum(weight_tilt)
) |>
ungroup()
}
pp_data = long_term_data_weekly %>% select(date, isin, ret, MKT_CAP, pos_event,neg_event) %>%
group_by(isin) %>%
mutate(
month = date,
ret_excess = ret,
permno = isin,
MKT_CAP = MKT_CAP/1000000000,
mktcap_lag = lag(MKT_CAP)) %>%
na.omit()
pp_monthly_lags = pp_data %>%
group_by(isin) %>%
transmute(isin,
date_5 = lead(date,5),
MKT_CAP)
pp_data = pp_data %>%
inner_join(pp_monthly_lags,
by = c("isin","date" = "date_5"),
suffix = c("", "_5"))
data_portfolios = pp_data %>%
mutate(
momentum_lag = mktcap_lag / MKT_CAP_5,
size_lag = log(mktcap_lag),
event = pos_event
) %>%
drop_na(contains("lag"))
data_portfolios = data_portfolios %>%
group_by(date) %>%
mutate(
n = n(),
relative_mktcap = mktcap_lag / sum(mktcap_lag),
across(contains("lag"), ~ (. - mean(.)) / sd(.)),
) %>%
ungroup() %>%
select(-mktcap_lag)
data_portfolios
n_parameters <- sum(str_detect(
colnames(data_portfolios), "lag"
))
n_parameters <- 3
theta <- rep(1.5, n_parameters)
n_parameters <- 3
theta <- rep(1.5, n_parameters)
names(theta) <- c("momentum_lag","size_lag","event")
theta
optimal_theta <- optim(
par = theta,
compute_objective_function,
objective_measure = "Expected utility",
data = data_portfolios,
value_weighting = TRUE,
allow_short_selling = FALSE
)
optimal_theta
weights <- compute_portfolio_weights(
optimal_theta,
data_portfolios,
value_weighting = TRUE,
allow_short_selling = FALSE
)
data_portfolios
data_portfolios |>
transmute(momentum_lag  = momentum_lag  / n,
size_lag = size_lag / n,
event = event / n)
data_portfolios |>
transmute(momentum_lag  = momentum_lag  / n,
size_lag = size_lag / n,
event = event / n) |>
as.matrix()
optimal_theta
theta = optimal_theta$par
theta
optimal_theta = optimal_theta$par
weights <- compute_portfolio_weights(
optimal_theta,
data_portfolios,
value_weighting = TRUE,
allow_short_selling = FALSE
)
evaluate_portfolio(weights) |>
print(n = Inf)
pp_data = long_term_data_weekly %>% select(date, isin, ret, MKT_CAP, pos_event,neg_event) %>%
group_by(isin) %>%
mutate(
month = date,
ret_excess = ret,
permno = isin,
MKT_CAP = MKT_CAP/1000000000,
mktcap_lag = lag(MKT_CAP)) %>%
na.omit()
pp_monthly_lags = pp_data %>%
group_by(isin) %>%
transmute(isin,
date_5 = lead(date,5),
MKT_CAP)
pp_data = pp_data %>%
inner_join(pp_monthly_lags,
by = c("isin","date" = "date_5"),
suffix = c("", "_5"))
data_portfolios = pp_data %>%
mutate(
momentum_lag = mktcap_lag / MKT_CAP_5,
size_lag = log(mktcap_lag),
event = neg_event
) %>%
drop_na(contains("lag"))
data_portfolios = data_portfolios %>%
group_by(date) %>%
mutate(
n = n(),
relative_mktcap = mktcap_lag / sum(mktcap_lag),
across(contains("lag"), ~ (. - mean(.)) / sd(.)),
) %>%
ungroup() %>%
select(-mktcap_lag)
n_parameters <- 3
theta <- rep(1.5, n_parameters)
names(theta) <- c("momentum_lag","size_lag","event")
optimal_theta <- optim(
par = theta,
compute_objective_function,
objective_measure = "Expected utility",
data = data_portfolios,
value_weighting = TRUE,
allow_short_selling = FALSE
)
optimal_theta = optimal_theta$par
optimal_theta
weights <- compute_portfolio_weights(
optimal_theta,
data_portfolios,
value_weighting = TRUE,
allow_short_selling = FALSE
)
evaluate_portfolio(weights) |>
print(n = Inf)
compute_portfolio_weights <- function(theta,
data,
value_weighting = TRUE,
allow_short_selling = TRUE) {
data |>
group_by(month) |>
bind_cols(
characteristic_tilt = data |>
transmute(across(contains("lag"), ~ . / n)) |>
as.matrix() %*% theta |> as.numeric()
) |>
mutate(
# Definition of benchmark weight
weight_benchmark = case_when(
value_weighting == TRUE ~ relative_mktcap,
value_weighting == FALSE ~ 1 / n
),
# Parametric portfolio weights
weight_tilt = weight_benchmark + characteristic_tilt,
# Short-sell constraint
weight_tilt = case_when(
allow_short_selling == TRUE ~ weight_tilt,
allow_short_selling == FALSE ~ pmax(0, weight_tilt)
),
# Weights sum up to 1
weight_tilt = weight_tilt / sum(weight_tilt)
) |>
ungroup()
}
pp_data = long_term_data_weekly %>% select(date, isin, ret, MKT_CAP, pos_event,neg_event) %>%
group_by(isin) %>%
mutate(
month = date,
ret_excess = ret,
permno = isin,
MKT_CAP = MKT_CAP/1000000000,
mktcap_lag = lag(MKT_CAP)) %>%
na.omit()
pp_monthly_lags = pp_data %>%
group_by(isin) %>%
transmute(isin,
date_5 = lead(date,5),
MKT_CAP)
pp_data = pp_data %>%
inner_join(pp_monthly_lags,
by = c("isin","date" = "date_5"),
suffix = c("", "_5"))
data_portfolios = pp_data %>%
mutate(
momentum_lag = mktcap_lag / MKT_CAP_5,
size_lag = log(mktcap_lag),
event = neg_event
) %>%
drop_na(contains("lag"))
data_portfolios = data_portfolios %>%
group_by(date) %>%
mutate(
n = n(),
relative_mktcap = mktcap_lag / sum(mktcap_lag),
across(contains("lag"), ~ (. - mean(.)) / sd(.)),
) %>%
ungroup() %>%
select(-mktcap_lag)
n_parameters <- sum(str_detect(colnames(data_portfolios), "lag"))
theta <- rep(1.5, n_parameters)
names(theta) <- colnames(data_portfolios)[str_detect(
colnames(data_portfolios), "lag")]
theta
optimal_theta <- optim(
par = theta,
compute_objective_function,
objective_measure = "Expected utility",
data = data_portfolios,
value_weighting = TRUE,
allow_short_selling = FALSE
)
optimal_theta = optimal_theta$par
optimal_theta
weights <- compute_portfolio_weights(
optimal_theta,
data_portfolios,
value_weighting = TRUE,
allow_short_selling = FALSE
)
evaluate_portfolio(weights) |>
print(n = Inf)
long_term_data_weekly
long_term_data_weekly_negative = long_term_data_weekly
# Add lagged values of the events to sort whether an event has happened in the last X months.
for (i in 1:12) {
long_term_data_weekly_negative[paste0("-",i)] <- long_term_data_weekly_negative %>% group_by(isin) %>% transmute(t = lag(neg_event,i)) %>% ungroup() %>% select(-isin)
}
long_term_data_negative = long_term_data_weekly_negative %>% select(date,isin,ret,MKT_CAP,contains("-")) %>%
pivot_longer(!c(date,isin,ret,MKT_CAP), names_to = "period", values_to = "event") %>%
mutate(period = as.numeric(period)) %>%
filter(event == '1') %>%
# Remove duplicate rows of the returns in case one ISIN pops up on several dates.
group_by(date,isin) %>% distinct(ret, .keep_all = TRUE)
long_term_data_negative
x=1
i=1
long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i)
?weighted.mean
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
group_by(date) %>%
summarise(ret = weighted.mean(ret,MKT_CAP)) %>%
left_join(eu_3factors_daily, by = "date")
long_term_data_M_negative %>%
summarise(alpha = tidy(lm(ret ~ 1 + mkt_excess + SMB + HML))$estimate[1],
t = tidy(lm(ret ~ 1 + mkt_excess + SMB + HML))$statistic[1],
p = tidy(lm(ret ~ 1 + mkt_excess + SMB + HML))$p.value[1],
return = mean(ret)) %>%
mutate(model = paste0(i,"M"))
long_term_data_weekly <- data_weekly %>%
transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>%
group_by(isin) %>%
transmute(date,isin,ret,MKT_CAP,
norm_positive_sum = replace_na(norm_positive_sum,0),
norm_negative_sum = replace_na(norm_negative_sum,0),
roll_mean = across(!c(date,ret,MKT_CAP),
~ rollmean(.x, k = 3, fill = NA, align = "right"))) %>%
unnest(roll_mean,names_sep = "_") %>% arrange(isin) %>%
group_by(isin) %>%
mutate(
roll_mean_positive = na_if(roll_mean_norm_positive_sum, 0),
roll_mean_negative = na_if(roll_mean_norm_negative_sum, 0),
positive_threshold = mean(roll_mean_positive,na.rm = TRUE) + 2*sd(roll_mean_positive,na.rm = TRUE),
negative_threshold = mean(roll_mean_negative,na.rm = TRUE) + 2*sd(roll_mean_negative,na.rm = TRUE)
) %>%
group_by(date,isin) %>%
# Make sure that we only calculate the cutoff value of periods with actual observations.
mutate(pos_event =
case_when(roll_mean_positive > positive_threshold & roll_mean_positive > 5 & roll_mean_positive > 1*roll_mean_norm_negative_sum ~ 1,
TRUE ~ 0),
neg_event =
case_when(roll_mean_negative > negative_threshold & roll_mean_negative > 5 & roll_mean_negative > 1*roll_mean_norm_positive_sum ~ 1,
TRUE ~ 0)
)
long_term_data_weekly_negative = long_term_data_weekly
# Add lagged values of the events to sort whether an event has happened in the last X months.
for (i in 1:12) {
long_term_data_weekly_negative[paste0("-",i)] <- long_term_data_weekly_negative %>% group_by(isin) %>% transmute(t = lag(neg_event,i)) %>% ungroup() %>% select(-isin)
}
# Add lagged values of the events to sort whether an event has happened in the last X months.
for (i in 1:12) {
long_term_data_weekly_negative[paste0("-",i)] <- long_term_data_weekly_negative %>% group_by(isin) %>% transmute(t = lag(neg_event,i)) %>% ungroup() %>% select(-isin)
}
long_term_data_negative = long_term_data_weekly_negative %>% select(date,isin,ret,MKT_CAP,contains("-")) %>%
pivot_longer(!c(date,isin,ret,MKT_CAP), names_to = "period", values_to = "event") %>%
mutate(period = as.numeric(period)) %>%
filter(event == '1') %>%
# Remove duplicate rows of the returns in case one ISIN pops up on several dates.
group_by(date,isin) %>% distinct(ret, .keep_all = TRUE)
list = list(1,3,6,12)
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
group_by(date) %>%
summarise(ret = weighted.mean(ret,MKT_CAP)) %>%
left_join(eu_3factors_daily, by = "date")
alpha_M_negative = long_term_data_M_negative %>%
summarise(alpha = tidy(lm(ret ~ 1 + mkt_excess + SMB + HML))$estimate[1],
t = tidy(lm(ret ~ 1 + mkt_excess + SMB + HML))$statistic[1],
p = tidy(lm(ret ~ 1 + mkt_excess + SMB + HML))$p.value[1],
return = mean(ret)) %>%
mutate(model = paste0(i,"M"))
alpha_M_negative
long_term_data_weekly_negative %>% select(date,isin,ret,MKT_CAP,contains("-"))
long_term_data_weekly_negative %>% select(date,isin,ret,MKT_CAP,contains("-")) %>%
pivot_longer(!c(date,isin,ret,MKT_CAP), names_to = "period", values_to = "event")
