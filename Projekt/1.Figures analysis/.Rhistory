norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>% group_by(isin) %>% mutate(re = lag(ret,1))
transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>% group_by(isin)
data_monthly %>% transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>% group_by(isin) %>% mutate(re = lag(ret,1))
data_monthly %>% transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>% group_by(isin) %>% mutate(re = lag(MKT_CAP,1))
data_monthly %>% transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>% group_by(isin) %>% mutate(re = lag(MKT_CAP,1)) %>% arrange(isin)
data_monthly %>% transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>% group_by(isin) %>% mutate(re = lead(MKT_CAP,1)) %>% arrange(isin)
data_monthly %>% transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>% group_by(isin) %>% mutate(norm_positive_sum = lead(norm_positive_sum,1),norm_negative_sum = lead(norm_negative_sum,1)) %>% arrange(norm_negative_sum)
data_monthly %>% transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>% group_by(isin) %>% mutate(norm_positive_sum = lead(norm_positive_sum,1),norm_negative_sum = lead(norm_negative_sum,1)) %>% arrange(desc(norm_negative_sum))
data_monthly %>% transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>% group_by(isin) %>% mutate(norm_positive_sum1 = lead(norm_positive_sum,1),norm_negative_sum1 = lead(norm_negative_sum,1)) %>% arrange(desc(norm_negative_sum))
rolling_means = list(1)
SDs = list(1)
emptylist_neg_1 = list()
emptylist_neg_2 = list()
for (y in 1:length(rolling_means)) {
for (z in 1:length(SDs)) {
long_term_data_monthly <- data_monthly %>%
#left_join(ESG_RR, by ="isin") %>% filter(ESG_risk_category == 'High') %>%
transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>%
group_by(isin) %>%
mutate(norm_positive_sum = lead(norm_positive_sum,1),norm_negative_sum = lead(norm_negative_sum,1)) %>%
transmute(date,isin,ret,MKT_CAP,
norm_positive_sum = replace_na(norm_positive_sum,0),
norm_negative_sum = replace_na(norm_negative_sum,0),
roll_mean = across(!c(date,ret,MKT_CAP),
~ rollmean(.x, k = y, fill = NA, align = "right"))) %>%
unnest(roll_mean,names_sep = "_") %>% arrange(isin) %>%
group_by(isin) %>%
mutate(
roll_mean_positive = na_if(roll_mean_norm_positive_sum, 0),
roll_mean_negative = na_if(roll_mean_norm_negative_sum, 0),
#roll_mean_positive = roll_mean_norm_positive_sum,
#roll_mean_negative = roll_mean_norm_negative_sum,
positive_threshold = mean(roll_mean_positive,na.rm = TRUE) + z*sd(roll_mean_positive,na.rm = TRUE),
negative_threshold = mean(roll_mean_negative,na.rm = TRUE) + z*sd(roll_mean_negative,na.rm = TRUE)
) %>%
group_by(date,isin) %>%
# Make sure that we only calculate the cutoff value of periods with actual observations.
mutate(
neg_event =
case_when(roll_mean_negative > negative_threshold & roll_mean_negative > 10 #& roll_mean_negative > 0.5*roll_mean_norm_positive_sum
~ 1,
TRUE ~ 0)
)
############################
# Negative events:
############################
# Add lagged values of the events to sort whether an event has happened in the last X months.
for (i in 1:12) {
long_term_data_monthly[paste0("-",i)] <- long_term_data_monthly %>% group_by(isin) %>% transmute(t = lag(neg_event,i)) %>% ungroup() %>% select(-isin)
}
long_term_data_negative = long_term_data_monthly %>% select(date,isin,ret,MKT_CAP,contains("-")) %>%
pivot_longer(!c(date,isin,ret,MKT_CAP), names_to = "period", values_to = "event") %>%
mutate(period = as.numeric(period)) %>%
filter(event == '1') %>%
# Remove duplicate rows of the returns in case one ISIN pops up on several dates.
group_by(date,isin) %>% distinct(ret, .keep_all = TRUE)
# x Month portfolio returns:
list = list(1,4,8,12)
alpha_negative <- data.frame(matrix(nrow=4, ncol=8))
colnames(alpha_negative)<-c("Alpha","t","p","r","ret","mkt","N","model")
for (x in 1:length(list)) {
i = list[[x]]
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
na.omit() %>%
group_by(date) %>%
summarise(
#ret =mean(ret),
ret = weighted.mean(ret,MKT_CAP),
n = n_distinct(isin)) %>%
left_join(dev_5factors_monthly , by = "date")
# Calculate alpha of portfolios:
alpha_M_negative = long_term_data_M_negative %>%
summarise(alpha = tidy(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$estimate[1],
t = tidy(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$statistic[1],
p = tidy(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$p.value[1],
r = glance(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$r.squared,
ret = 100*mean(12*ret,na.rm = TRUE),
mkt = 100*mean(12*mkt_excess, na.rm = TRUE),
N = mean(n)) %>%
mutate(model = paste0(i,"M_",y,"_",z))
alpha_negative[x,] = alpha_M_negative
}
emptylist_neg_1[[z]] = alpha_negative
}
emptylist_neg_2[[y]] = emptylist_neg_1
}
emptylist_neg_2
rolling_means = list(1)
SDs = list(1)
emptylist_neg_1 = list()
emptylist_neg_2 = list()
for (y in 1:length(rolling_means)) {
for (z in 1:length(SDs)) {
long_term_data_monthly <- data_monthly %>%
left_join(ESG_RR, by ="isin") %>% filter(ESG_risk_category == 'High') %>%
transmute(date,isin,MKT_CAP,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>%
group_by(isin) %>%
mutate(norm_positive_sum = lead(norm_positive_sum,1),norm_negative_sum = lead(norm_negative_sum,1)) %>%
transmute(date,isin,ret,MKT_CAP,
norm_positive_sum = replace_na(norm_positive_sum,0),
norm_negative_sum = replace_na(norm_negative_sum,0),
roll_mean = across(!c(date,ret,MKT_CAP),
~ rollmean(.x, k = y, fill = NA, align = "right"))) %>%
unnest(roll_mean,names_sep = "_") %>% arrange(isin) %>%
group_by(isin) %>%
mutate(
roll_mean_positive = na_if(roll_mean_norm_positive_sum, 0),
roll_mean_negative = na_if(roll_mean_norm_negative_sum, 0),
#roll_mean_positive = roll_mean_norm_positive_sum,
#roll_mean_negative = roll_mean_norm_negative_sum,
positive_threshold = mean(roll_mean_positive,na.rm = TRUE) + z*sd(roll_mean_positive,na.rm = TRUE),
negative_threshold = mean(roll_mean_negative,na.rm = TRUE) + z*sd(roll_mean_negative,na.rm = TRUE)
) %>%
group_by(date,isin) %>%
# Make sure that we only calculate the cutoff value of periods with actual observations.
mutate(
neg_event =
case_when(roll_mean_negative > negative_threshold & roll_mean_negative > 10 #& roll_mean_negative > 0.5*roll_mean_norm_positive_sum
~ 1,
TRUE ~ 0)
)
############################
# Negative events:
############################
# Add lagged values of the events to sort whether an event has happened in the last X months.
for (i in 1:12) {
long_term_data_monthly[paste0("-",i)] <- long_term_data_monthly %>% group_by(isin) %>% transmute(t = lag(neg_event,i)) %>% ungroup() %>% select(-isin)
}
long_term_data_negative = long_term_data_monthly %>% select(date,isin,ret,MKT_CAP,contains("-")) %>%
pivot_longer(!c(date,isin,ret,MKT_CAP), names_to = "period", values_to = "event") %>%
mutate(period = as.numeric(period)) %>%
filter(event == '1') %>%
# Remove duplicate rows of the returns in case one ISIN pops up on several dates.
group_by(date,isin) %>% distinct(ret, .keep_all = TRUE)
# x Month portfolio returns:
list = list(1,4,8,12)
alpha_negative <- data.frame(matrix(nrow=4, ncol=8))
colnames(alpha_negative)<-c("Alpha","t","p","r","ret","mkt","N","model")
for (x in 1:length(list)) {
i = list[[x]]
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
na.omit() %>%
group_by(date) %>%
summarise(
#ret =mean(ret),
ret = weighted.mean(ret,MKT_CAP),
n = n_distinct(isin)) %>%
left_join(dev_5factors_monthly , by = "date")
# Calculate alpha of portfolios:
alpha_M_negative = long_term_data_M_negative %>%
summarise(alpha = tidy(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$estimate[1],
t = tidy(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$statistic[1],
p = tidy(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$p.value[1],
r = glance(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$r.squared,
ret = 100*mean(12*ret,na.rm = TRUE),
mkt = 100*mean(12*mkt_excess, na.rm = TRUE),
N = mean(n)) %>%
mutate(model = paste0(i,"M_",y,"_",z))
alpha_negative[x,] = alpha_M_negative
}
emptylist_neg_1[[z]] = alpha_negative
}
emptylist_neg_2[[y]] = emptylist_neg_1
}
emptylist_neg_2
list = list(1,4,8,12)
alpha_negative <- data.frame(matrix(nrow=4, ncol=8))
colnames(alpha_negative)<-c("Alpha","t","p","r","ret","mkt","N","model")
for (x in 1:length(list)) {
i = list[[x]]
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
na.omit() %>%
group_by(date) %>%
summarise(
ret =mean(ret),
#ret = weighted.mean(ret,MKT_CAP),
n = n_distinct(isin)) %>%
left_join(dev_5factors_monthly , by = "date")
# Calculate alpha of portfolios:
alpha_M_negative = long_term_data_M_negative %>%
summarise(alpha = tidy(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$estimate[1],
t = tidy(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$statistic[1],
p = tidy(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$p.value[1],
r = glance(lm(ret - RF ~ 1 + mkt_excess + SMB + HML + RMW + CMA, weights = n))$r.squared,
ret = 100*mean(12*ret,na.rm = TRUE),
mkt = 100*mean(12*mkt_excess, na.rm = TRUE),
N = mean(n)) %>%
mutate(model = paste0(i,"M_",y,"_",z))
alpha_negative[x,] = alpha_M_negative
}
alpha_negative
long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
na.omit() %>%
group_by(date) %>%
summarise(
ret1 =mean(ret),
ret = weighted.mean(ret,MKT_CAP),
n = n_distinct(isin))
long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
na.omit() %>%
group_by(date) %>%
summarise(
ret =mean(ret),
#ret = weighted.mean(ret,MKT_CAP),
n = n_distinct(isin))
knitr::opts_chunk$set(echo = TRUE)
# Load packages:
library(tidyverse)
library(lubridate)
library(readxl)
library(lmtest)
library(timetk)
library(dplyr)
library(zoo)
library(furrr)
library(ggplot2)
library(ggpubr)
library(xtable)
library(purrr)
library(stringr)
library(magrittr)
library(BSDA)
library(scales)
library(generics)
source("functions.R")
## REMEMBER - if we need to run this again, then we should change the ISINs in the file - currently NASDAQ
ESG_RR <- read.csv("C:/Users/Marti/OneDrive - University of Copenhagen/KU/Speciale/Data behandling/ESG_ratings.csv") %>%
select("isin" = ISIN,ESG_risk_category) %>%
mutate(ESG_risk_category =
case_when(
ESG_risk_category == "Severe" ~ "High",
ESG_risk_category == "Negligible" ~ "Low",
TRUE ~ ESG_risk_category)) %>%
filter(!ESG_risk_category %in% c('No data','Severe','Negligible')) %>% na.omit()
# Sentiment and stock data merged together with weekly observations
data_monthly <- read.csv("C:/Users/Marti/OneDrive - University of Copenhagen/KU/Speciale/Data behandling/all_data_month.csv", sep = ",") %>%
mutate(date = as.Date(date)) %>% select(date,isin, MKT_CAP,free_float_mkt_cap,W_RETURN, sentiment_negative_count,sentiment_positive_count,sdg_not_relevant_negative_count, sdg_not_relevant_positive_count)
# In the Fama French dataset, the variable "mkt_excess_ret" is created from the Bloomberg data as a market cap-weighted index.
eu_3factors_monthly = read.csv("C:/Users/Marti/OneDrive - University of Copenhagen/KU/Speciale/Data behandling/eu_3factors_monthly.csv", sep = ",") %>%
na.omit() %>% select(-X,-w_ret) %>%
mutate(date = as.Date(date)) %>%
filter(date >= '2018-01-01')
rolling_means = list(1)
SDs = list(1)
emptylist_neg_1 = list()
emptylist_neg_2 = list()
for (y in 1:length(rolling_means)) {
for (z in 1:length(SDs)) {
long_term_data_monthly <- data_monthly %>%
# left_join(ESG_RR, by ="isin") %>% filter(ESG_risk_category == 'Low') %>%
transmute(date,isin,MKT_CAP, free_float_mkt_cap,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>%
group_by(isin) %>%
transmute(date,isin,ret,MKT_CAP,free_float_mkt_cap,
norm_positive_sum = replace_na(norm_positive_sum,0),
norm_negative_sum = replace_na(norm_negative_sum,0),
roll_mean = across(!c(date,ret,MKT_CAP,free_float_mkt_cap),
~ rollmean(.x, k = y, fill = NA, align = "right"))) %>%
unnest(roll_mean,names_sep = "_") %>% arrange(isin) %>%
group_by(isin) %>%
mutate(
roll_mean_positive = na_if(roll_mean_norm_positive_sum, 0),
roll_mean_negative = na_if(roll_mean_norm_negative_sum, 0),
positive_threshold = mean(roll_mean_positive,na.rm = TRUE) + z*sd(roll_mean_positive,na.rm = TRUE),
negative_threshold = mean(roll_mean_negative,na.rm = TRUE) + z*sd(roll_mean_negative,na.rm = TRUE)
) %>%
group_by(date,isin) %>%
# Make sure that we only calculate the cutoff value of periods with actual observations.
mutate(
neg_event =
case_when(roll_mean_negative > negative_threshold & roll_mean_negative > 5 #& roll_mean_negative > 0.5*roll_mean_norm_positive_sum
~ 1,
TRUE ~ 0)
)
############################
# Negative events:
############################
# Add lagged values of the events to sort whether an event has happened in the last X months.
for (i in 1:12) {
long_term_data_monthly[paste0("-",i)] <- long_term_data_monthly %>% group_by(isin) %>% transmute(t = lag(neg_event,i)) %>% ungroup() %>% select(-isin)
}
long_term_data_negative = long_term_data_monthly %>% select(date,isin,ret,MKT_CAP,free_float_mkt_cap,contains("-")) %>%
pivot_longer(!c(date,isin,ret,MKT_CAP,free_float_mkt_cap), names_to = "period", values_to = "event") %>%
mutate(period = as.numeric(period)) %>%
filter(event == '1') %>%
# Remove duplicate rows of the returns in case one ISIN pops up on several dates.
group_by(date,isin) %>% distinct(ret, .keep_all = TRUE)
# x Month portfolio returns:
list = list(1,4,8,12)
alpha_negative <- data.frame(matrix(nrow=4, ncol=6))
colnames(alpha_negative)<-c("Alpha","t","p","r","N","model")
for (x in 1:length(list)) {
i = list[[x]]
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
group_by(date) %>%
summarise(
ret = weighted.mean(ret,free_float_mkt_cap),
#ret = mean(ret),
n = n_distinct(isin)) %>%
left_join(eu_3factors_monthly, by = "date")
# Calculate alpha of portfolios:
alpha_M_negative = long_term_data_M_negative %>%
summarise(alpha = tidy(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n))$estimate[1],
t = tidy(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML , weights = n))$statistic[1],
p = tidy(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n))$p.value[1],
r = glance(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n))$r.squared,
N = mean(n)) %>%
mutate(model = paste0(i,"M_",y,"_",z))
alpha_negative[x,] = alpha_M_negative
}
emptylist_neg_1[[z]] = alpha_negative
}
emptylist_neg_2[[y]] = emptylist_neg_1
}
emptylist_neg_2
i=1
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
group_by(date) %>%
summarise(
ret = weighted.mean(ret,free_float_mkt_cap),
#ret = mean(ret),
n = n_distinct(isin)) %>%
left_join(eu_3factors_monthly, by = "date")
#
long_term_data_M_negative %>%
summarise(tidy(summary(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n))))
9.135788e-0
1.977610e-03
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
group_by(date) %>%
summarise(
#ret = weighted.mean(ret,free_float_mkt_cap),
ret = mean(ret),
n = n_distinct(isin)) %>%
left_join(eu_3factors_monthly, by = "date")
#
long_term_data_M_negative %>%
summarise(tidy(summary(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n))))
model = lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n, data = long_term_data_M_negative)
summary(model)
?coeftest
lmtest::bgtest(model, order = 1)
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
group_by(date) %>%
summarise(
ret = weighted.mean(ret,free_float_mkt_cap),
#ret = mean(ret),
n = n_distinct(isin)) %>%
left_join(eu_3factors_monthly, by = "date")
model = lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n, data = long_term_data_M_negative)
summary(model)
lmtest::bgtest(model, order = 1)
lmtest::dwtest(model)
lmtest::bptest(model)
lmtest::bgtest(model, order = 1)
alpha_negative
#
long_term_data_M_negative %>%
summarise(tidy(summary(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n))))
rolling_means = list(1)
SDs = list(1)
emptylist_neg_1 = list()
emptylist_neg_2 = list()
for (y in 1:length(rolling_means)) {
for (z in 1:length(SDs)) {
long_term_data_monthly <- data_monthly %>%
left_join(ESG_RR, by ="isin") %>% filter(ESG_risk_category == 'Low') %>%
transmute(date,isin,MKT_CAP, free_float_mkt_cap,
ret = W_RETURN,
norm_positive_sum = sentiment_positive_count - sdg_not_relevant_positive_count,
norm_negative_sum = sentiment_negative_count - sdg_not_relevant_negative_count,
) %>%
group_by(isin) %>%
transmute(date,isin,ret,MKT_CAP,free_float_mkt_cap,
norm_positive_sum = replace_na(norm_positive_sum,0),
norm_negative_sum = replace_na(norm_negative_sum,0),
roll_mean = across(!c(date,ret,MKT_CAP,free_float_mkt_cap),
~ rollmean(.x, k = y, fill = NA, align = "right"))) %>%
unnest(roll_mean,names_sep = "_") %>% arrange(isin) %>%
group_by(isin) %>%
mutate(
roll_mean_positive = na_if(roll_mean_norm_positive_sum, 0),
roll_mean_negative = na_if(roll_mean_norm_negative_sum, 0),
positive_threshold = mean(roll_mean_positive,na.rm = TRUE) + z*sd(roll_mean_positive,na.rm = TRUE),
negative_threshold = mean(roll_mean_negative,na.rm = TRUE) + z*sd(roll_mean_negative,na.rm = TRUE)
) %>%
group_by(date,isin) %>%
# Make sure that we only calculate the cutoff value of periods with actual observations.
mutate(
neg_event =
case_when(roll_mean_negative > negative_threshold & roll_mean_negative > 5 #& roll_mean_negative > 0.5*roll_mean_norm_positive_sum
~ 1,
TRUE ~ 0)
)
############################
# Negative events:
############################
# Add lagged values of the events to sort whether an event has happened in the last X months.
for (i in 1:12) {
long_term_data_monthly[paste0("-",i)] <- long_term_data_monthly %>% group_by(isin) %>% transmute(t = lag(neg_event,i)) %>% ungroup() %>% select(-isin)
}
long_term_data_negative = long_term_data_monthly %>% select(date,isin,ret,MKT_CAP,free_float_mkt_cap,contains("-")) %>%
pivot_longer(!c(date,isin,ret,MKT_CAP,free_float_mkt_cap), names_to = "period", values_to = "event") %>%
mutate(period = as.numeric(period)) %>%
filter(event == '1') %>%
# Remove duplicate rows of the returns in case one ISIN pops up on several dates.
group_by(date,isin) %>% distinct(ret, .keep_all = TRUE)
# x Month portfolio returns:
list = list(1,4,8,12)
alpha_negative <- data.frame(matrix(nrow=4, ncol=6))
colnames(alpha_negative)<-c("Alpha","t","p","r","N","model")
for (x in 1:length(list)) {
i = list[[x]]
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
group_by(date) %>%
summarise(
ret = weighted.mean(ret,free_float_mkt_cap),
#ret = mean(ret),
n = n_distinct(isin)) %>%
left_join(eu_3factors_monthly, by = "date")
# Calculate alpha of portfolios:
alpha_M_negative = long_term_data_M_negative %>%
summarise(alpha = tidy(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n))$estimate[1],
t = tidy(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML , weights = n))$statistic[1],
p = tidy(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n))$p.value[1],
r = glance(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n))$r.squared,
N = mean(n)) %>%
mutate(model = paste0(i,"M_",y,"_",z))
alpha_negative[x,] = alpha_M_negative
}
emptylist_neg_1[[z]] = alpha_negative
}
emptylist_neg_2[[y]] = emptylist_neg_1
}
i=1
long_term_data_M_negative = long_term_data_negative %>%
# Only include the last 1 months:
filter(period >= -i) %>%
group_by(date) %>%
summarise(
ret = weighted.mean(ret,free_float_mkt_cap),
#ret = mean(ret),
n = n_distinct(isin)) %>%
left_join(eu_3factors_monthly, by = "date")
#
long_term_data_M_negative %>%
summarise(tidy(summary(lm(ret - RF ~ 1 + mkt_excess_ret + SMB + HML, weights = n))))
